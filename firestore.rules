
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSystemAdmin() {
      return request.auth.token.role == 'system-admin';
    }
    
    function isSchoolMember(schoolId) {
      return request.auth != null && request.auth.token.schoolId == schoolId;
    }

    // --- Collections ---

    // Test connection collection should be writable by any authenticated user.
    match /test_connection/{docId} {
      allow create: if request.auth != null;
    }

    // Users can only be read by admins or by the user themselves.
    match /users/{userId} {
      allow read: if isSystemAdmin() || request.auth.uid == userId;
      // Note: User creation is typically handled by a secure backend function, not direct client writes.
      allow create, update: if isSystemAdmin();
    }
    
    // Schools can be read by anyone, but only written to by a system admin.
    match /schools/{schoolId} {
      allow read: if request.auth != null;
      allow write: if isSystemAdmin();
    }

    // Staff records can be read by any member of that school, but only written by an admin.
    match /staff/{staffId} {
      allow read: if isSchoolMember(resource.data.schoolId);
      allow write: if isSystemAdmin();
    }

    // Books can be read by any member of the school.
    // Writes (adding/updating books) should be restricted (e.g., to librarians or admins).
    match /books/{bookId} {
      allow read: if isSchoolMember(resource.data.schoolId);
      allow write: if isSchoolMember(resource.data.schoolId); // Simplified for demo
    }
    
    // Transactions can be read/written by members of the school.
    match /transactions/{transactionId} {
      allow read, write, delete: if isSchoolMember(resource.data.schoolId);
      allow create: if isSchoolMember(request.resource.data.schoolId);
    }
    
    // Exam results can be read/written by members of the school.
    match /examResults/{resultId} {
       allow read, write, delete: if isSchoolMember(resource.data.schoolId);
       allow create: if isSchoolMember(request.resource.data.schoolId);
    }
    
    // Disciplinary records are sensitive and should have tight controls.
    // For now, allow school members to manage their own school's records.
    match /disciplinary/{recordId} {
       allow read, write, delete: if isSchoolMember(resource.data.schoolId);
       allow create: if isSchoolMember(request.resource.data.schoolId);
    }
    
    // Counselling records are highly sensitive. Access should be tightly controlled.
    match /counselling/{recordId} {
       allow read, write, delete: if isSchoolMember(resource.data.schoolId);
       allow create: if isSchoolMember(request.resource.data.schoolId);
    }

    // OHS records can be managed by school members.
    match /ohs/{recordId} {
       allow read, write, delete: if isSchoolMember(resource.data.schoolId);
       allow create: if isSchoolMember(request.resource.data.schoolId);
    }

    // Default deny: All other paths are not accessible.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
